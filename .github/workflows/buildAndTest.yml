name: Build and Test Components

on:
  pull_request:
    branches:
      - main
      - 'release/**'
  push:
    branches:
      - main
      - 'release/**'

  workflow_dispatch:
  workflow_call:

env:
  GO_VERSION: '1.24'

jobs:  
  # checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Check licenses
  #       run: make ci-check-licenses
  #     - name: Check that the release version is synced across the repo
  #       run: |
  #         make prepare-release version=$(grep -oP '(?<=const Version = ")[^"]+' "./pkg/version/version.go")
  #         git diff --exit-code
      
  # build_and_test_linux:
  #   runs-on: ubuntu-latest
  #   needs: checks
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache: false
  #     - name: Run Tests
  #       run: |
  #         has_failure=false
  #         orig_dir=$(pwd)

  #         while read -r modfile; do

  #           echo "$modfile"
  #           cd $(dirname "$modfile")
  #           output=$(go test -v ./...)
  #           echo "$output" | grep -q "FAIL"

  #           if [ $? -eq 0 ]; then
  #             has_failure=true
  #             echo "Exit code: $?"
  #           fi

  #           echo "$output"
  #           cd "$orig_dir"
  #         done < <(find . -name go.mod)

  #         if [ "$has_failure" = true ]; then
  #           exit 1
  #         fi

  # build_and_test_windows:
  #   runs-on: windows-latest
  #   needs: checks
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache: false
  #     - name: Run Tests
  #       run: |
  #         $hasFailure = $false

  #         Get-ChildItem -Recurse -Filter 'go.mod' | ForEach-Object {
  #             Push-Location $_.Directory
              
  #             $output = go test -v ./...
  #             $exitCode = $LASTEXITCODE
  #             $output | ForEach-Object { if ($_ -match 'FAIL') { $_ } }
  #             if ($exitCode -ne 0) {
  #                 $hasFailure = $true
  #             }
  #             Pop-Location
  #         }

  #         if ($hasFailure) {
  #             exit 1
  #         }
        
  build_and_test_darwin_arm64:
    # Based on https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    runs-on: macos-latest
    # needs: checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: Run Tests
        run: |
          has_failure=false
          orig_dir=$(pwd)

          go_mod_files=$(find . -name go.mod)
          for modfile in $go_mod_files; do

            echo "$modfile"
            cd $(dirname "$modfile")
            echo "$(pwd)"
            output=$(go test -v ./...)
            go_test_exit_code=$?
            echo "Go Test Exit Code: $go_test_exit_code"
            #echo "$output"
            # echo "$output" | grep -q "FAIL"

            # if [ $? -eq 0 ]; then
            #   has_failure=true
            #   echo "Exit code: $?"
            # fi

            # echo "Has Failure: $has_failure"

            cd "$orig_dir"
            echo "$(pwd)"
          done

          if [ "$has_failure" = true ]; then
            echo "Tests failed"
            exit 1
          fi

          echo "Tests passed"
        shell: bash