name: Build and Test Components

on:
  pull_request:
    branches:
      - main
      - 'release/**'
  push:
    branches:
      - main
      - 'release/**'

  workflow_dispatch:
  workflow_call:

env:
  GO_VERSION: '1.24'

jobs:  
  checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check licenses
        run: make ci-check-licenses
      - name: Check that the release version is synced across the repo
        run: |
          make prepare-release version=$(grep -oP '(?<=const Version = ")[^"]+' "./pkg/version/version.go")
          git diff --exit-code
      
  build_and_test_linux:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: Run Tests
        run: |
          set +e
          
          has_failure=false
          orig_dir=$(pwd)

          go_mod_files=$(find . -name go.mod)
          for modfile in $go_mod_files; do
            cd $(dirname "$modfile")

            count=$(find . -name '*_test.go' | wc -l)
            if [[ "$count" -eq 0 ]]; then
              echo "No test files found for module $modfile"
              cd "$orig_dir"
              continue
            fi

            echo "Processing tests for module $modfile"
            go test -v ./...
            if [[ $? != 0 ]]; then
              echo "Test suit failed for module $modfile"
              has_failure=true
            fi           

            cd "$orig_dir"
          done

          if [ "$has_failure" = true ]; then
            echo "Some tests failed"
            exit 1
          fi

          echo "All tests passed"
          exit 0
        shell: bash

  build_and_test_windows:
    runs-on: windows-latest
    # needs: checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: Run Tests
        run: |
          $hasFailure = $false

          Get-ChildItem -Recurse -Filter 'go.mod' | ForEach-Object {
              Push-Location $_.Directory

              $testFiles = Get-ChildItem -Recurse -Filter '*_test.go'
              if ($testFiles.Count -eq 0) {
                Write-Host "No test files found for module $modfile"
                continue
              }

              Write-Host "Processing tests for module $($_.FullName)"        
              go test -v ./...
              if ($LASTEXITCODE -ne 0) {
                Write-Host "Test suite failed for module $modfile"
                $hasFailure = $true
              }

              Pop-Location
          }

          if ($hasFailure) {
            Write-Host "Some tests failed"
            exit 1
          }

          Write-Host "All tests passed"
          exit 0
        shell: pwsh
        
  build_and_test_darwin_arm64:
    # Based on https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
    runs-on: macos-latest
    # needs: checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false
      - name: Run Tests
        run: |
          set +e
          
          has_failure=false
          orig_dir=$(pwd)

          go_mod_files=$(find . -name go.mod)
          for modfile in $go_mod_files; do
            cd $(dirname "$modfile")

            count=$(find . -name '*_test.go' | wc -l)
            if [[ "$count" -eq 0 ]]; then
              echo "No test files found for module $modfile"
              cd "$orig_dir"
              continue
            fi

            echo "Processing tests for module $modfile"
            go test -v ./...
            if [[ $? != 0 ]]; then
              echo "Tests failed for module $modfile"
              has_failure=true
            fi           

            cd "$orig_dir"
          done

          if [ "$has_failure" = true ]; then
            echo "Some tests failed"
            exit 1
          fi

          echo "All tests passed"
          exit 0
        shell: bash