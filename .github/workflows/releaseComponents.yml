name: Release Components

on:
  push:
    paths:
      - 'pkg/version/version.go'
    branches:
      - main
      - 'release/**'

  workflow_dispatch:

jobs:
  release_checks:
    name: Release Checks
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Current Tag
        id: get-tag
        run: echo "tag=$(grep -oP '(?<=const Version = ")[^"]+' "./pkg/version/version.go")" >> $GITHUB_OUTPUT
      - name: Verify that release does not already exist
        env:
          # for gh cli
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release view "v${{ steps.get-tag.outputs.tag }}" 2>&1 | grep -q "^release not found$"; then
            echo "Release v${{ steps.get-tag.outputs.tag }} already exists on GitHub."
            exit 1
          fi

  build_and_test:
    name: Build and Test components
    uses: ./.github/workflows/buildAndTest.yml
    secrets: inherit
    runs-on: ubuntu-latest
    needs:
      - deploy_dockerhub
      - deploy_dockerhub_windows
      - release_checks
    name: Create Multi-platform Docker Manifest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_SOLARWINDS_ORG_LOGIN }}
          password: ${{ secrets.ENOPS5919_OPENTELEMETRYCOLLECTOR_DOCKER_HUB_CI_OAT }}

      - name: Get Manifest for Full Image
        run: |
          docker manifest inspect ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }} > manifest-full.json

      - name: Create Multi-arch Manifest for Full Image
        run: |
          docker manifest create ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}  \
            --amend ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-nanoserver-ltsc2022 \
            --amend ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-nanoserver-ltsc2019 \
            --amend ${{ env.DOCKERHUB_IMAGE }}@$(jq -r '.manifests[] | select(.platform.os == "linux" and .platform.architecture == "amd64") | .digest' manifest-full.json) \
            --amend ${{ env.DOCKERHUB_IMAGE }}@$(jq -r '.manifests[] | select(.platform.os == "linux" and .platform.architecture == "arm64") | .digest' manifest-full.json)

      - name: Get Manifest for K8s Image
        run: |
          docker manifest inspect ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-k8s > manifest-k8s.json
          
      - name: Create Multi-arch Manifest for K8s Image
        run: |
          docker manifest create ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-k8s  \
            --amend ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-nanoserver-ltsc2022-k8s \
            --amend ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-nanoserver-ltsc2019-k8s \
            --amend ${{ env.DOCKERHUB_IMAGE }}@$(jq -r '.manifests[] | select(.platform.os == "linux" and .platform.architecture == "amd64") | .digest' manifest-k8s.json) \
            --amend ${{ env.DOCKERHUB_IMAGE }}@$(jq -r '.manifests[] | select(.platform.os == "linux" and .platform.architecture == "arm64") | .digest' manifest-k8s.json)

      - name: Push multi-arch full manifest
        run: |
          docker manifest push ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}

      - name: Push multi-arch k8s manifest
        run: |
          docker manifest push ${{ env.DOCKERHUB_IMAGE }}:${{ needs.release_checks.outputs.image_tag }}-k8s

  create_release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs:
      - release_checks
      - build_and_test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find Previous Tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=version:refname | grep -P "^v\d+\.\d+\.\d+$" | tail -n 1)
          echo "Previous tag: $PREVIOUS_TAG"
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          # for gh cli
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.release_checks.outputs.image_tag }} \
            --title v${{ needs.release_checks.outputs.image_tag }} \
            --generate-notes \
            --notes-start-tag ${{ env.PREVIOUS_TAG }}
      - name: Tag Go packages on GitHub
        run: |
          folders=("./exporter" "./extension" "./pkg" "./receiver" "./connector" "./processor")

          for folder in "${folders[@]}"; do
              for package_folder in $folder/*/; do
                  if [ -f "$package_folder/go.mod" ]; then
                      git tag ${package_folder#./}v${{ needs.release_checks.outputs.image_tag }}
                      git push origin ${package_folder#./}v${{ needs.release_checks.outputs.image_tag }}
                      echo "Pushed tag ${package_folder#./}v${{ needs.release_checks.outputs.image_tag }}"
                  fi
              done
          done
