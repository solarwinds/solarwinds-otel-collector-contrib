// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res    pcommon.Resource
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
	return &ResourceBuilder{
		config: rac,
		res:    pcommon.NewResource(),
	}
}

// SetSwOtelcolMqttBrokerName sets provided value as "sw.otelcol.mqtt.broker.name" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerName(val string) {
	if rb.config.SwOtelcolMqttBrokerName.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.name", val)
	}
}

// SetSwOtelcolMqttBrokerPort sets provided value as "sw.otelcol.mqtt.broker.port" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerPort(val int64) {
	if rb.config.SwOtelcolMqttBrokerPort.Enabled {
		rb.res.Attributes().PutInt("sw.otelcol.mqtt.broker.port", val)
	}
}

// SetSwOtelcolMqttBrokerProtocolMqtt sets "sw.otelcol.mqtt.broker.protocol=mqtt" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerProtocolMqtt() {
	if rb.config.SwOtelcolMqttBrokerProtocol.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.protocol", "mqtt")
	}
}

// SetSwOtelcolMqttBrokerProtocolMqtts sets "sw.otelcol.mqtt.broker.protocol=mqtts" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerProtocolMqtts() {
	if rb.config.SwOtelcolMqttBrokerProtocol.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.protocol", "mqtts")
	}
}

// SetSwOtelcolMqttBrokerServer sets provided value as "sw.otelcol.mqtt.broker.server" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerServer(val string) {
	if rb.config.SwOtelcolMqttBrokerServer.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.server", val)
	}
}

// SetSwOtelcolMqttBrokerStatusOK sets "sw.otelcol.mqtt.broker.status=OK" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerStatusOK() {
	if rb.config.SwOtelcolMqttBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.status", "OK")
	}
}

// SetSwOtelcolMqttBrokerStatusConnectionFailed sets "sw.otelcol.mqtt.broker.status=ConnectionFailed" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerStatusConnectionFailed() {
	if rb.config.SwOtelcolMqttBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.status", "ConnectionFailed")
	}
}

// SetSwOtelcolMqttBrokerStatusSubscribeFailed sets "sw.otelcol.mqtt.broker.status=SubscribeFailed" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerStatusSubscribeFailed() {
	if rb.config.SwOtelcolMqttBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.status", "SubscribeFailed")
	}
}

// SetSwOtelcolMqttBrokerStatusRoundtripFailed sets "sw.otelcol.mqtt.broker.status=RoundtripFailed" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttBrokerStatusRoundtripFailed() {
	if rb.config.SwOtelcolMqttBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.broker.status", "RoundtripFailed")
	}
}

// SetSwOtelcolMqttSensorName sets provided value as "sw.otelcol.mqtt.sensor.name" attribute.
func (rb *ResourceBuilder) SetSwOtelcolMqttSensorName(val string) {
	if rb.config.SwOtelcolMqttSensorName.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.mqtt.sensor.name", val)
	}
}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
