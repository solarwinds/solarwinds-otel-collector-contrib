// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res    pcommon.Resource
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
	return &ResourceBuilder{
		config: rac,
		res:    pcommon.NewResource(),
	}
}

// SetSwOtelcolIotBrokerHost sets provided value as "sw.otelcol.IotBroker.host" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerHost(val string) {
	if rb.config.SwOtelcolIotBrokerHost.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.host", val)
	}
}

// SetSwOtelcolIotBrokerName sets provided value as "sw.otelcol.IotBroker.name" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerName(val string) {
	if rb.config.SwOtelcolIotBrokerName.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.name", val)
	}
}

// SetSwOtelcolIotBrokerPort sets provided value as "sw.otelcol.IotBroker.port" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerPort(val int64) {
	if rb.config.SwOtelcolIotBrokerPort.Enabled {
		rb.res.Attributes().PutInt("sw.otelcol.IotBroker.port", val)
	}
}

// SetSwOtelcolIotBrokerProtocolMqtt sets "sw.otelcol.IotBroker.protocol=mqtt" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerProtocolMqtt() {
	if rb.config.SwOtelcolIotBrokerProtocol.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.protocol", "mqtt")
	}
}

// SetSwOtelcolIotBrokerProtocolMqtts sets "sw.otelcol.IotBroker.protocol=mqtts" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerProtocolMqtts() {
	if rb.config.SwOtelcolIotBrokerProtocol.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.protocol", "mqtts")
	}
}

// SetSwOtelcolIotBrokerStatusOK sets "sw.otelcol.IotBroker.status=OK" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerStatusOK() {
	if rb.config.SwOtelcolIotBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.status", "OK")
	}
}

// SetSwOtelcolIotBrokerStatusConnectionFailed sets "sw.otelcol.IotBroker.status=ConnectionFailed" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerStatusConnectionFailed() {
	if rb.config.SwOtelcolIotBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.status", "ConnectionFailed")
	}
}

// SetSwOtelcolIotBrokerStatusSubscribeFailed sets "sw.otelcol.IotBroker.status=SubscribeFailed" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerStatusSubscribeFailed() {
	if rb.config.SwOtelcolIotBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.status", "SubscribeFailed")
	}
}

// SetSwOtelcolIotBrokerStatusRoundtripFailed sets "sw.otelcol.IotBroker.status=RoundtripFailed" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotBrokerStatusRoundtripFailed() {
	if rb.config.SwOtelcolIotBrokerStatus.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotBroker.status", "RoundtripFailed")
	}
}

// SetSwOtelcolIotSensorName sets provided value as "sw.otelcol.IotSensor.name" attribute.
func (rb *ResourceBuilder) SetSwOtelcolIotSensorName(val string) {
	if rb.config.SwOtelcolIotSensorName.Enabled {
		rb.res.Attributes().PutStr("sw.otelcol.IotSensor.name", val)
	}
}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
